{"msg":"OK","code":0,"data":{"tpId":0,"prevTqUrl":"","isWantAnswer":false,"totalCommentCnt":1640,"hasLatestSubmission":false,"allTagArray":[],"tqId":0,"nextTqUrl":"","isShowSimQuestion":true,"customizeHeadTitle":"","showDebug":false,"codingSubTagId":3,"questionTags":[{"acmTag":false,"baiyuanTag":false,"companyTag":false,"createTime":1417674707000,"creatorId":0,"customTag":false,"iconCode":0,"id":580,"info":"","jobTag":false,"name":"链表","otherTag":false,"parentId":577,"searchLenevoTag":false,"smallTag":false,"systemTag":true},{"acmTag":false,"baiyuanTag":false,"companyTag":false,"createTime":1489125763000,"creatorId":0,"customTag":false,"iconCode":0,"id":2678,"info":"","jobTag":true,"name":"测试开发工程师","otherTag":false,"parentId":638,"searchLenevoTag":false,"smallTag":false,"systemTag":true},{"acmTag":false,"baiyuanTag":false,"companyTag":true,"createTime":1528527178000,"creatorId":0,"customTag":false,"iconCode":0,"iconUrl":"https://uploadfiles.nowcoder.com/files/20210607/826546_1623052540325/默认文件1623052500206.png","id":933,"info":"","jobTag":false,"name":"阅文集团","otherTag":false,"parentId":234,"searchLenevoTag":false,"smallTag":false,"systemTag":true},{"acmTag":false,"baiyuanTag":false,"companyTag":false,"createTime":1607514408000,"creatorId":0,"customTag":false,"iconCode":0,"id":10059,"info":"\"\"","jobTag":false,"name":"2021","otherTag":false,"parentId":249,"searchLenevoTag":false,"smallTag":false,"systemTag":true}],"question":{"auditedQuestion":true,"caseCount":0,"cepingType":0,"choiceQuestion":false,"codeQuestion":true,"codeWithoutCaseQuestion":false,"content":"输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。","contestQuestion":false,"createTime":1427858947000,"creatorGroupId":0,"creatorHrUid":0,"creatorId":1,"cts":false,"ctsDepartmentId":0,"dataMiningQuestion":false,"delete":false,"designQuestion":false,"difficulty":2,"discardAnswerOrder":false,"discardSpace":false,"duration":10,"followedCount":0,"hiddenCorrect":true,"hotLevel":0,"hotValue":0,"id":23267,"inputDesc":"","judgeType":1,"likeTotal":2138,"markBit":0,"memoryLimit":65536,"multi":0,"outputDesc":"","paidQuestion":false,"paperTotal":0,"parentId":0,"passRatio":0.0,"passTotal":268625,"personTotal":933168,"position":0,"problemId":3706,"refId":0,"referenceAnswer":"<a href=\"https://pan.baidu.com/s/1AjplXeEXTG4R73UZVza1Hg\" target=\"_blank\">进阶题题解</a>","referenceCreatorId":0,"samples":[{"input":"{1,3,5},{2,4,6}","note":"","output":"{1,2,3,4,5,6}\n"}],"shareTotal":0,"shield":false,"showAnswer":false,"sourcePaperId":28151283,"specialDataStructureStrs":"","status":1,"supportLang":"java,cpp","supportSelfTest":true,"tags":"580","terminalOnlySeen":false,"tiankongQuestion":false,"tikuType":1,"tikuTypeName":"系统题库","timeLimit":1,"title":"合并两个排序的链表","type":4,"typeName":"编程","uuid":"d8b6b4358f774294a89de2a6ac4d9337","viewTotal":156669,"visibility":100,"wantAnswerCount":0},"hasAcceptSubmission":false,"customizeHeadUrl":"","allTopicArray":[],"tPage":0,"totalSolutionCnt":95,"isFollowed":false,"sourceTpId":0,"userCount":933168,"sourceQid":23267,"codingProblem":{"mainModeProblem":true,"sqlProblem":false,"type":1,"supportEnhance":false,"limitLangStr":[],"frontProblem":false,"id":3706,"shellProblem":false,"inputSample":"","submitLimit":100,"outputSample":"","paramsMainJson":"[{\"name\":\"pHead1\",\"desc\":\"\",\"dataType\":\"LIST_NODE\",\"container\":\"DEFALUT\",\"showArg\":false},{\"name\":\"pHead2\",\"desc\":\"\",\"dataType\":\"LIST_NODE\",\"container\":\"DEFALUT\",\"showArg\":false}]","revision":17,"methodMainJson":"{\"methodName\":\"Merge\",\"methodDesc\":\"\",\"returnDataType\":\"LIST_NODE\",\"returnContainer\":\"DEFALUT\",\"language\":\"2\"}","outputDesc":"","memoryLimit":65536,"limitLang":[],"template":"","questionId":23267,"caseCount":9,"tCLProblem":false,"title":"合并两个排序的链表","inputDesc":"","content":"输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。","dataFile":"1565688949362.zip","vOJProblem":false,"cssTemplate":"/**\n * struct ListNode {\n *\tint val;\n *\tstruct ListNode *next;\n * };\n */\n\n/**\n * \n * @param pHead1 ListNode类 \n * @param pHead2 ListNode类 \n * @return ListNode类\n */\nstruct ListNode* Merge(struct ListNode* pHead1, struct ListNode* pHead2 ) {\n    // write code here\n}","supportMem":false,"standardSubmissionIds":"","timeLimit":1,"outputLimit":16000,"pDF":false,"testCasesExt":"{\"samples\":[{\"output\":\"{1,2,3,4,5,6}\\n\",\"input\":\"{1,3,5},{2,4,6}\",\"note\":\"\",\"index\":1}]}","supportLang":"java,cpp"},"rp":0}}